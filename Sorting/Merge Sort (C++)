    vector<int> Merge(vector<int>& left, vector<int>& right)
    {
        vector<int> temp;
        int left_index = 0;
        int right_index = 0;
        
        while((left_index < left.size()) && (right_index < right.size()))
        {
            if(left[left_index] <= right[right_index])
            {
                temp.push_back(left[left_index]);
                left_index++;
            }
            else
            {
                temp.push_back(right[right_index]);
                right_index++;
            }
        }
        
        if(left_index<left.size())
            for(int i = left_index; i < left.size(); i++)
                temp.push_back(left[i]);

        if(right_index<right.size())
            for(int i = right_index; i < right.size(); i++)
                temp.push_back(right[i]);

        return temp;
    }

    vector<int> Merge_Sort(vector<int>& arr)
    {
        if(arr.size()<=1)
            return arr;

        int mid = arr.size()/2;
        vector<int> left;
        vector<int> right;

        for(int i = 0; i < mid; i++)
            left.push_back(arr[i]);

        for(int i = mid; i < arr.size(); i++)
            right.push_back(arr[i]);

        left = Merge_Sort(left);
        right = Merge_Sort(right);

        return Merge(left,right);
    }
